{"ast":null,"code":"import _slicedToArray from \"C:/Users/GaneshSurna/Desktop/Successful_React_Projects/investment-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\GaneshSurna\\\\Desktop\\\\Successful_React_Projects\\\\investment-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Table from \"./Table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n\n  // use like this:\n\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    yearlyData1 = _useState2[0],\n    setYearlyData1 = _useState2[1];\n  var calculateHandler = function calculateHandler(userInput) {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    var yearlyData = []; // per-year results\n\n    var currentSavings = +userInput[\"current-savings\"];\n    var initialInvestment = currentSavings; // feel free to change the shape of this input object!\n    var yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    var expectedReturn = +userInput[\"expected-return\"] / 100;\n    var duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (var i = 0; i < duration; i++) {\n      var yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: formatter.format(yearlyInterest),\n        savingsEndOfYear: formatter.format(currentSavings),\n        yearlyContribution: formatter.format(yearlyContribution),\n        totalInterest: formatter.format(currentSavings - initialInvestment - yearlyContribution * (i + 1)),\n        investedCapital: formatter.format(initialInvestment + yearlyContribution * (i + 1))\n      });\n    }\n    setYearlyData1(yearlyData);\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      itemsList: yearlyData1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"64dHODjyUtxHKnqLKesIacTcepo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","Form","Table","jsxDEV","_jsxDEV","App","_s","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","_useState","_useState2","_slicedToArray","yearlyData1","setYearlyData1","calculateHandler","userInput","yearlyData","currentSavings","initialInvestment","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","format","savingsEndOfYear","totalInterest","investedCapital","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","itemsList","_c","$RefreshReg$"],"sources":["C:/Users/GaneshSurna/Desktop/Successful_React_Projects/investment-project/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Table from \"./Table\";\n\nfunction App() {\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n\n  // use like this:\n\n  const [yearlyData1, setYearlyData1] = useState([]);\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"current-savings\"];\n    let initialInvestment = currentSavings; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: formatter.format(yearlyInterest),\n        savingsEndOfYear: formatter.format(currentSavings),\n        yearlyContribution: formatter.format(yearlyContribution),\n        totalInterest: formatter.format(\n          currentSavings - initialInvestment - yearlyContribution * (i + 1)\n        ),\n        investedCapital: formatter.format(\n          initialInvestment + yearlyContribution * (i + 1)\n        )\n      });\n    }\n    setYearlyData1(yearlyData);\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <Header />\n\n      <Form onCalculate={calculateHandler} />\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      <Table itemsList={yearlyData1} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,IAAMC,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IAC/CC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC;;EAEF;;EAEA,IAAAC,SAAA,GAAsCf,QAAQ,CAAC,EAAE,CAAC;IAAAgB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA3CG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAClC,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,SAAS,EAAK;IACtC;IACA;;IAEA,IAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC;IAClD,IAAIG,iBAAiB,GAAGD,cAAc,CAAC,CAAC;IACxC,IAAME,kBAAkB,GAAG,CAACJ,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,IAAMK,cAAc,GAAG,CAACL,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,IAAMM,QAAQ,GAAG,CAACN,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,IAAMC,cAAc,GAAGN,cAAc,GAAGG,cAAc;MACtDH,cAAc,IAAIM,cAAc,GAAGJ,kBAAkB;MACrDH,UAAU,CAACQ,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAErB,SAAS,CAACwB,MAAM,CAACH,cAAc,CAAC;QAChDI,gBAAgB,EAAEzB,SAAS,CAACwB,MAAM,CAACT,cAAc,CAAC;QAClDE,kBAAkB,EAAEjB,SAAS,CAACwB,MAAM,CAACP,kBAAkB,CAAC;QACxDS,aAAa,EAAE1B,SAAS,CAACwB,MAAM,CAC7BT,cAAc,GAAGC,iBAAiB,GAAGC,kBAAkB,IAAIG,CAAC,GAAG,CAAC,CAClE,CAAC;QACDO,eAAe,EAAE3B,SAAS,CAACwB,MAAM,CAC/BR,iBAAiB,GAAGC,kBAAkB,IAAIG,CAAC,GAAG,CAAC,CACjD;MACF,CAAC,CAAC;IACJ;IACAT,cAAc,CAACG,UAAU,CAAC;IAC1B;EACF,CAAC;;EAED,oBACEjB,OAAA;IAAA+B,QAAA,gBACE/B,OAAA,CAACJ,MAAM;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVnC,OAAA,CAACH,IAAI;MAACuC,WAAW,EAAErB;IAAiB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAIvCnC,OAAA,CAACF,KAAK;MAACuC,SAAS,EAAExB;IAAY;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV;AAACjC,EAAA,CAxDQD,GAAG;AAAAqC,EAAA,GAAHrC,GAAG;AA0DZ,eAAeA,GAAG;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}